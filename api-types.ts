/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/room-api/workspaces': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 내 workspace 조회
     * @description 내 workspace 조회
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['model.CreateWorkspaceResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ex.ErrorOutput'];
          };
        };
      };
    };
    put?: never;
    /**
     * workspace 생성
     * @description workspace 생성
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description query params */
      requestBody: {
        content: {
          'application/json': components['schemas']['model.CreateWorkspaceRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['model.CreateWorkspaceResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ex.ErrorOutput'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/room-api/workspaces/invite': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Workspace 초대 목록 조회
     * @description Workspace 초대 목록 조회
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['model.CreateWorkspaceResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ex.ErrorOutput'];
          };
        };
      };
    };
    put?: never;
    /**
     * workspace 초대
     * @description workspace 초대
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description query params */
      requestBody: {
        content: {
          'application/json': components['schemas']['model.CreateWorkspaceRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['model.CreateWorkspaceResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ex.ErrorOutput'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/room-api/workspaces/invite/accept': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Workspace 초대 승락
     * @description Workspace 초대 승락
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ex.ErrorOutput'];
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/room-api/workspaces/{WorkspaceID}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * workspace 수정
     * @description workspace 수정
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Workspace ID */
          workspaceID: string;
        };
        cookie?: never;
      };
      /** @description Update Workspace data */
      requestBody: {
        content: {
          'application/json': components['schemas']['model.UpdateWorkspaceRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['model.UpdateWorkspaceResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ex.ErrorOutput'];
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/room-api/workspaces/{WorkspaceID}/rooms': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 내 방 목록 조회
     * @description 내 방 목록 조회
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description WorkspaceID */
          WorkspaceID: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['model.RoomDto'][];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ex.ErrorOutput'];
          };
        };
      };
    };
    put?: never;
    /**
     * 방 생성
     * @description 방 생성
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description WorkspaceID */
          WorkspaceID: string;
        };
        cookie?: never;
      };
      /** @description query params */
      requestBody: {
        content: {
          'application/json': components['schemas']['model.CreateRoomRestRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['model.CreateRoomRestResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ex.ErrorOutput'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/room-api/workspaces/{WorkspaceID}/rooms/:RoomID/leave': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 방 초대
     * @description 방 초대
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description WorkspaceID */
          WorkspaceID: string;
          /** @description RoomID */
          RoomID: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['model.RoomMemberDto'][];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ex.ErrorOutput'];
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/room-api/workspaces/{WorkspaceID}/rooms/:RoomID/members': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 내 방 멤버 조회
     * @description 내 방 멤버 조회
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description WorkspaceID */
          WorkspaceID: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['model.RoomMemberDto'][];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ex.ErrorOutput'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/room-api/workspaces/{WorkspaceID}/rooms/{RoomID}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 방 수정
     * @description 방 수정
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description WorkspaceID */
          WorkspaceID: string;
        };
        cookie?: never;
      };
      /** @description query params */
      requestBody: {
        content: {
          'application/json': components['schemas']['model.EditRoomRestRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['model.CreateRoomRestResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ex.ErrorOutput'];
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/room-api/workspaces/{WorkspaceID}/rooms/{RoomID}/messages': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 방 메시지 목록 조회
     * @description 방 메시지 목록 조회
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description WorkspaceID */
          WorkspaceID: string;
          /** @description RoomID */
          RoomID: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['model.GetMessagesResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ex.ErrorOutput'];
          };
        };
      };
    };
    put?: never;
    /**
     * 방 메시지 전송
     * @description 방 메시지 전송
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description WorkspaceID */
          WorkspaceID: string;
          /** @description RoomID */
          RoomID: string;
        };
        cookie?: never;
      };
      /** @description Body */
      requestBody: {
        content: {
          'application/json': components['schemas']['model.CreateMessageRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['model.CreateRoomRestResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ex.ErrorOutput'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/room-api/workspaces/{WorkspaceID}/rooms/{RoomID}/messages/{MessageID}/reactions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 리액션(emoji) 추가
     * @description 리액션(emoji) 추가
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description WorkspaceID */
          WorkspaceID: string;
          /** @description RoomID */
          RoomID: string;
          /** @description MessageID */
          MessageID: string;
        };
        cookie?: never;
      };
      /** @description Body */
      requestBody: {
        content: {
          'application/json': components['schemas']['model.CreateReactionRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['model.CreateRoomEventResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ex.ErrorOutput'];
          };
        };
      };
    };
    /**
     * 리액션(emoji) 삭제
     * @description 리액션(emoji) 삭제
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description WorkspaceID */
          WorkspaceID: string;
          /** @description RoomID */
          RoomID: string;
          /** @description MessageID */
          MessageID: string;
        };
        cookie?: never;
      };
      /** @description Body */
      requestBody: {
        content: {
          'application/json': components['schemas']['model.CreateReactionRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['model.CreateRoomEventResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ex.ErrorOutput'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/room-api/workspaces/{WorkspaceID}/rooms/{RoomID}/messages/{MessageID}/threads': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Thread 메시지 목록 조회
     * @description Thread 메시지 목록 조회
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description WorkspaceID */
          WorkspaceID: string;
          /** @description RoomID */
          RoomID: string;
          /** @description MessageID */
          MessageID: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['model.GetMessagesResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ex.ErrorOutput'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workspaces/:WorkspaceID/members': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Workspace Member 조회
     * @description Workspace Member 조회
     *     Workspace Member 조회
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['model.WorkspaceMemberDto'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ex.ErrorResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workspaces/:WorkspaceID/members/:MemberID': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Workspace 나가기
     * @description Workspace 나가기
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ex.ErrorResponse'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workspaces/:WorkspaceID/members/:MemberID/profile': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 프로필 생성
     * @description 프로필 생성
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['model.CreateWorkspaceMemberProfileResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ex.ErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workspaces/:WorkspaceID/rooms': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Find My rooms
     * @description Find My rooms
     *     Find My rooms
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['model.RoomMemberDto'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ex.ErrorResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @enum {string} */
    'ex.ErrorCode':
      | 'M_INVALID_PARAM'
      | 'M_INVALID_ARGUMENT'
      | 'M_UNRECOGNIZED'
      | 'M_NOT_JSON'
      | '4005'
      | 'M_NOT_FOUND'
      | 'M_MISSING_PARAM'
      | 'M_BAD_STATE'
      | 'M_UNSUPPORTED_OPERATION'
      | 'M_UNAUTHORIZED'
      | 'M_UNREGISTERED'
      | 'M_FORBIDDEN'
      | 'M_INVALID_USERNAME'
      | '5001'
      | '5800'
      | '5900'
      | '5999'
      | '9000'
      | 'M_UNKNOWN';
    'ex.ErrorOutput': {
      data?: Record<string, never>;
      errorCode?: components['schemas']['ex.ErrorCode'];
      errorMessage?: string;
    };
    'ex.ErrorResponse': Record<string, never>;
    'model.CreateMessageRequest': {
      content?: string;
      event_type?: components['schemas']['spec.EventType'];
      /** @description THREAD 타입 일 때 사용 */
      message_id?: components['schemas']['spec.MessageID'];
    };
    'model.CreateReactionRequest': {
      emoji?: string;
      is_thread?: boolean;
      workspace_id?: string;
    };
    'model.CreateRoomEventResponse': {
      message_id?: components['schemas']['spec.MessageID'];
      message_thread_id?: components['schemas']['spec.MessageThreadID'];
      ts?: string;
    };
    'model.CreateRoomRestRequest': {
      creator?: string;
      dm_target?: string;
      invite_members?: string[];
      is_private?: boolean;
      name?: string;
      room_type?: components['schemas']['spec.RoomType'];
      workspace_id?: string;
    };
    'model.CreateRoomRestResponse': {
      room_id?: string;
    };
    'model.CreateUserProfileRequest': {
      nickname?: string;
      profile_image?: string;
    };
    'model.CreateWorkspaceMemberProfileResponse': {
      memberProfileID?: number;
    };
    'model.CreateWorkspaceRequest': {
      description?: string;
      name?: string;
      profile?: components['schemas']['model.CreateUserProfileRequest'];
    };
    'model.CreateWorkspaceResponse': {
      creator?: string;
      description?: string;
      member_id?: string;
      member_role?: components['schemas']['spec.MemberRole'];
      name?: string;
      status?: components['schemas']['spec.Status'];
      url?: string;
      workspace_id?: string;
    };
    'model.EditRoomRestRequest': {
      editor?: string;
      is_private?: boolean;
      name?: string;
    };
    'model.GetMessage': {
      content?: string;
      created_at?: string;
      data?: components['schemas']['spec.MessageData'];
      message_id?: components['schemas']['spec.MessageID'];
      message_thread_id?: components['schemas']['spec.MessageThreadID'];
      sender_id?: string;
      ts?: string;
      updated_at?: string;
      updated_by?: string;
    };
    'model.GetMessagesResponse': {
      end?: components['schemas']['spec.MessageID'];
      has_more?: boolean;
      limit?: number;
      messages?: components['schemas']['model.GetMessage'][];
      room_id?: string;
      start?: components['schemas']['spec.MessageID'];
    };
    'model.RoomDto': {
      created_at?: number;
      created_by?: string;
      data?: components['schemas']['spec.RoomData'];
      is_private?: boolean;
      name?: string;
      room_id?: string;
      room_type?: components['schemas']['spec.RoomType'];
      status?: components['schemas']['spec.Status'];
      workspace_id?: string;
    };
    'model.RoomMemberDto': {
      isBanned?: boolean;
      memberID?: string;
      role?: components['schemas']['spec.MemberRole'];
      roomID?: string;
      roomMemberID?: number;
      status?: components['schemas']['spec.Status'];
    };
    'model.UpdateWorkspaceRequest': {
      description?: string;
      name?: string;
      status?: components['schemas']['spec.Status'];
      url?: string;
    };
    'model.UpdateWorkspaceResponse': Record<string, never>;
    'model.WorkspaceMemberDto': {
      workspaceID?: string;
      workspaceMemberID?: string;
      workspaceMemberRole?: components['schemas']['spec.MemberRole'];
    };
    'spec.Emoji': {
      emoji?: string;
      sender_id?: string;
    };
    /** @enum {string} */
    'spec.EventType':
      | ''
      | 'MESSAGE'
      | 'INVITE'
      | 'THREAD'
      | 'REACTION'
      | 'CREATE_ROOM'
      | 'JOIN_ROOM'
      | 'LEAVE_ROOM'
      | 'TYPING'
      | 'PRESENCE'
      | 'ETC';
    /** @enum {string} */
    'spec.MemberRole': 'CREATOR' | 'ADMIN' | 'NORMAL';
    'spec.MessageData': {
      emoji_count?: number;
      emojis?: components['schemas']['spec.Emoji'][];
      text?: string;
      thread_count?: number;
      type?: string;
    };
    /** @enum {integer} */
    'spec.MessageID': -1;
    /** @enum {integer} */
    'spec.MessageThreadID': -1;
    'spec.RoomData': {
      members?: string[];
    };
    /** @enum {string} */
    'spec.RoomType': '' | 'DM' | 'GROUP' | 'CHANNEL';
    /** @enum {string} */
    'spec.Status': 'ACTIVE' | 'INACTIVE' | 'DELETED';
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
